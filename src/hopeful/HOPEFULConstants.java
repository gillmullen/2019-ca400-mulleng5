/* Generated By:JJTree&JavaCC: Do not edit this line. HOPEFULConstants.java */

/**
 * Token literal values and constants.
 * Generated by org.javacc.parser.OtherFilesGen#start()
 */
public interface HOPEFULConstants {

  /** End of File. */
  int EOF = 0;
  /** RegularExpression Id. */
  int PRINT = 13;
  /** RegularExpression Id. */
  int INT = 14;
  /** RegularExpression Id. */
  int STRING = 15;
  /** RegularExpression Id. */
  int BOOL = 16;
  /** RegularExpression Id. */
  int VOID = 17;
  /** RegularExpression Id. */
  int TRUE = 18;
  /** RegularExpression Id. */
  int FALSE = 19;
  /** RegularExpression Id. */
  int IF = 20;
  /** RegularExpression Id. */
  int ELSE = 21;
  /** RegularExpression Id. */
  int WHILE = 22;
  /** RegularExpression Id. */
  int DEF = 23;
  /** RegularExpression Id. */
  int MAIN = 24;
  /** RegularExpression Id. */
  int RETURN = 25;
  /** RegularExpression Id. */
  int NOP = 26;
  /** RegularExpression Id. */
  int LBR = 27;
  /** RegularExpression Id. */
  int RBR = 28;
  /** RegularExpression Id. */
  int SEMIC = 29;
  /** RegularExpression Id. */
  int PLUS_SIGN = 30;
  /** RegularExpression Id. */
  int MINUS_SIGN = 31;
  /** RegularExpression Id. */
  int MUL_SIGN = 32;
  /** RegularExpression Id. */
  int DIV_SIGN = 33;
  /** RegularExpression Id. */
  int EQUALS = 34;
  /** RegularExpression Id. */
  int OR = 35;
  /** RegularExpression Id. */
  int AND = 36;
  /** RegularExpression Id. */
  int QUOTE = 37;
  /** RegularExpression Id. */
  int LCB = 38;
  /** RegularExpression Id. */
  int RCB = 39;
  /** RegularExpression Id. */
  int EQ = 40;
  /** RegularExpression Id. */
  int NEQ = 41;
  /** RegularExpression Id. */
  int GT = 42;
  /** RegularExpression Id. */
  int LT = 43;
  /** RegularExpression Id. */
  int GE = 44;
  /** RegularExpression Id. */
  int LE = 45;
  /** RegularExpression Id. */
  int COMMA = 46;
  /** RegularExpression Id. */
  int MOD = 47;
  /** RegularExpression Id. */
  int NUM = 48;
  /** RegularExpression Id. */
  int INTEGER_LITERAL = 49;
  /** RegularExpression Id. */
  int ID = 50;
  /** RegularExpression Id. */
  int STRING_LITERAL = 51;
  /** RegularExpression Id. */
  int LETTER = 52;
  /** RegularExpression Id. */
  int OTHER = 53;

  /** Lexical state. */
  int DEFAULT = 0;
  /** Lexical state. */
  int IN_COMMENT = 1;
  /** Lexical state. */
  int IN_SINGLE_LINE_COMMENT = 2;

  /** Literal token values. */
  String[] tokenImage = {
    "<EOF>",
    "\" \"",
    "\"\\t\"",
    "\"\\n\"",
    "\"\\r\"",
    "\"\\f\"",
    "\"/*\"",
    "\"//\"",
    "\"/*\"",
    "\"*/\"",
    "<token of kind 10>",
    "<token of kind 11>",
    "<token of kind 12>",
    "\"print\"",
    "\"int\"",
    "\"string\"",
    "\"boolean\"",
    "\"void\"",
    "\"true\"",
    "\"false\"",
    "\"if\"",
    "\"else\"",
    "\"while\"",
    "\"def\"",
    "\"main\"",
    "\"return\"",
    "\"skip\"",
    "\"(\"",
    "\")\"",
    "\";\"",
    "\"+\"",
    "\"-\"",
    "\"*\"",
    "\"/\"",
    "\"=\"",
    "\"|\"",
    "\"&\"",
    "\"\\\"\"",
    "\"{\"",
    "\"}\"",
    "\"==\"",
    "\"!=\"",
    "\">\"",
    "\"<\"",
    "\">=\"",
    "\"<=\"",
    "\",\"",
    "\"%\"",
    "<NUM>",
    "<INTEGER_LITERAL>",
    "<ID>",
    "<STRING_LITERAL>",
    "<LETTER>",
    "<OTHER>",
  };

}
